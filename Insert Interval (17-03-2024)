//Explanation:
//1) The problem's answer is contained in a class called answer, which is defined in this code.
//2) A public function called insert exists inside the class and requires two parameters: intervals and newInterval.
//3) Set the value of a variable i to 0. The intervals will be iterated through using this.
//4) Create a result vector, which is an empty vector of vectors. Thus, the merged intervals will be stored.
//5) To go through each interval in the intervals vector, start a while loop.
//6) Verifying Non-Overlap Time intervals:
//-> Verify whether the current interval concludes before the next one begins. -> Push the current interval into the result vector in this instance.
//-> There won't be any overlap with the succeeding intervals if the current interval begins after the previous interval concludes, therefore break free from the loop.
//-> If there is an overlap, combine the intervals by adjusting the new interval's start and end positions to include both. 
//7) Inserting Merged Interval: The merged interval, or the updated new interval, should be inserted into the result vector following the while loop. 
//8) Remaining Intervals Insert: Incorporate any leftover intervals from the initial vector intervals into the final vector. 
//9) Give back the vector result with the combined intervals in it.


//cpp code

class Solution {
public:
    vector<vector<int>> insert(vector<vector<int>>& intervals, vector<int>& newInterval) {
        int i = 0;
        vector<vector<int>> result;
        
        while(i < intervals.size()) {
            if(intervals[i][1] < newInterval[0]) {
                result.push_back(intervals[i]);
            } else if (intervals[i][0] > newInterval[1]) {
                break;
            } else {
                //Overlap : merge them
                newInterval[0] = min(newInterval[0], intervals[i][0]);
                newInterval[1] = max(newInterval[1], intervals[i][1]);
            }
            i++;
        }
        
        result.push_back(newInterval);
        while(i < intervals.size()) {
            result.push_back(intervals[i]);
            i++;
        }
        return result;
    }
};
