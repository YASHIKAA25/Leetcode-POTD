//Explanation:
//1) Class Definition: The Solution class definition is the primary one.
//2) Function Definition: The class contains a member function called numSubarrayProductLessThanK, which accepts a vector of integers called nums and an integer called k as inputs. An integer is returned.
//3) Initialization of Variables: Four integer variables are declared and initialized within the function:
//> The left and right pointers for a sliding window are indicated by the values of 0 for left and right.
//> product, which has a starting value of 1, will store the product of the components in the sliding window.
//> count, whose initial value is 0, counts the subarrays whose product is less than k.
//4) Size of the Vector: The size() function is used to assign n the nums vector's size.
//5) Handling Edge Cases: In an edge case, the function returns 0 right away if k is equal to or less than 1. This is due to the fact that if k is less than or equal to 1, then any product of a subarray will always be bigger than or equal to 1.
//6) Sliding Window technique: To iterate through the nums vector, the function's primary logic employs a sliding window technique.
//> Until the right pointer reaches the vector's end, the while loop keeps running.
//> The element at the right pointer is multiplied by the product to update it inside the loop.
//> Within is another nested while loop that continues to run for as long as the product is larger than or equal to k. The left pointer is increased during this loop, and the element at the left pointer is divided by the product.
//> Once the inner while loop has ended, count is increased by 1 + (left - right). This counts the number of subarrays with a product less than k that end at the correct reference.
//> The sliding window is finally moved to the right by incrementing the right pointer.
//7) Return Count: The function returns the count, which contains the total number of subarrays with product smaller than k, after the while loop has finished.

//cpp code

class Solution {
public:
  int numSubarrayProductLessThanK(vector<int>& nums, int k) {
    int left = 0, right = 0, product = 1, count = 0;
    int n = nums.size();
    if(k <= 1) return 0;
    while (right < n) {
      product *= nums[right];
      while (product >= k) product /= nums[left++];
      count += 1 + (right - left);
      right++;
    }
    return count;
  }
};
